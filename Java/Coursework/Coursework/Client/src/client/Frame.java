package client;

import java.io.File;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class Frame extends javax.swing.JFrame {

    private String currentPath = "";
    private FileManagerClient client;
    private DefaultListModel<String> listModel;
    /**
     * Creates new form Frame
     */
    public Frame() {
        initComponents();
    }
    
    public Frame(FileManagerClient client) {
        this.client = client;
        initComponents();
        listModel = new DefaultListModel<>();
        jListFiles.setModel(listModel);
        refreshFileList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenu1 = new javax.swing.JMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jFrame1 = new javax.swing.JFrame();
        jFrame2 = new javax.swing.JFrame();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        popupMenu1 = new java.awt.PopupMenu();
        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        menuBar2 = new java.awt.MenuBar();
        menu3 = new java.awt.Menu();
        menu4 = new java.awt.Menu();
        popupMenu2 = new java.awt.PopupMenu();
        jPopupMenu3 = new javax.swing.JPopupMenu();
        jPopupMenu4 = new javax.swing.JPopupMenu();
        jPopupMenu5 = new javax.swing.JPopupMenu();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuBar3 = new javax.swing.JMenuBar();
        jMenu6 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();
        jMenu8 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jMenuBar4 = new javax.swing.JMenuBar();
        jMenu9 = new javax.swing.JMenu();
        jMenu10 = new javax.swing.JMenu();
        jMenu11 = new javax.swing.JMenu();
        jMenuBar5 = new javax.swing.JMenuBar();
        jMenu12 = new javax.swing.JMenu();
        jMenu13 = new javax.swing.JMenu();
        jPopupMenu6 = new javax.swing.JPopupMenu();
        jPanel1 = new javax.swing.JPanel();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jTextFieldSearch = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListFiles = new javax.swing.JList<>();
        jButtonBack = new javax.swing.JButton();
        jButtonRefresh = new javax.swing.JButton();
        jButtonSearch = new javax.swing.JButton();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuSortName = new javax.swing.JMenu();
        jMenuName = new javax.swing.JMenuItem();
        jMenuSortSize = new javax.swing.JMenuItem();
        jMenuSortType = new javax.swing.JMenuItem();
        jMenuDate = new javax.swing.JMenuItem();
        jMenuView = new javax.swing.JMenu();
        jMenuViewTile = new javax.swing.JMenuItem();
        jMenuViewList = new javax.swing.JMenuItem();
        jMenuUpload = new javax.swing.JMenu();
        jMenuDelete = new javax.swing.JMenu();
        jMenuCreateFolder = new javax.swing.JMenu();
        jMenuRename = new javax.swing.JMenu();
        jMenuCopy = new javax.swing.JMenu();
        jMenuDownload = new javax.swing.JMenu();

        jMenu1.setText("jMenu1");

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        popupMenu1.setLabel("popupMenu1");

        menu1.setLabel("File");
        menuBar1.add(menu1);

        menu2.setLabel("Edit");
        menuBar1.add(menu2);

        menu3.setLabel("File");
        menuBar2.add(menu3);

        menu4.setLabel("Edit");
        menuBar2.add(menu4);

        popupMenu2.setLabel("popupMenu2");

        jMenu2.setText("File");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Edit");
        jMenuBar1.add(jMenu3);

        jMenu6.setText("File");
        jMenuBar3.add(jMenu6);

        jMenu7.setText("Edit");
        jMenuBar3.add(jMenu7);

        jMenu8.setText("jMenu8");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jMenu9.setText("File");
        jMenuBar4.add(jMenu9);

        jMenu10.setText("Edit");
        jMenuBar4.add(jMenu10);

        jMenu11.setText("jMenu11");

        jMenu12.setText("File");
        jMenuBar5.add(jMenu12);

        jMenu13.setText("Edit");
        jMenuBar5.add(jMenu13);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        jScrollPane1.setViewportView(jEditorPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextFieldSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSearchActionPerformed(evt);
            }
        });

        jListFiles.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jListFiles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListFilesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jListFiles);

        jButtonBack.setText("Назад");
        jButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBackActionPerformed(evt);
            }
        });

        jButtonRefresh.setText("Обновить");
        jButtonRefresh.setMaximumSize(new java.awt.Dimension(72, 25));
        jButtonRefresh.setMinimumSize(new java.awt.Dimension(72, 25));
        jButtonRefresh.setName(""); // NOI18N
        jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshActionPerformed(evt);
            }
        });

        jButtonSearch.setText("Поиск");
        jButtonSearch.setMaximumSize(new java.awt.Dimension(72, 25));
        jButtonSearch.setMinimumSize(new java.awt.Dimension(72, 25));
        jButtonSearch.setName(""); // NOI18N
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jMenuBar.setBorderPainted(false);
        jMenuBar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jMenuBar.setFont(jMenuBar.getFont());
        jMenuBar.setMinimumSize(new java.awt.Dimension(400, 50));
        jMenuBar.setOpaque(true);
        jMenuBar.setPreferredSize(new java.awt.Dimension(400, 35));

        jMenuSortName.setText("Сортировать");

        jMenuName.setText("Названию");
        jMenuName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuNameActionPerformed(evt);
            }
        });
        jMenuSortName.add(jMenuName);

        jMenuSortSize.setText("Размеру");
        jMenuSortSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSortSizeActionPerformed(evt);
            }
        });
        jMenuSortName.add(jMenuSortSize);

        jMenuSortType.setText("Типу");
        jMenuSortName.add(jMenuSortType);

        jMenuDate.setText("Дате изменения");
        jMenuDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuDateActionPerformed(evt);
            }
        });
        jMenuSortName.add(jMenuDate);

        jMenuBar.add(jMenuSortName);

        jMenuView.setText("Вид");

        jMenuViewTile.setText("Плитка");
        jMenuView.add(jMenuViewTile);

        jMenuViewList.setText("Список");
        jMenuView.add(jMenuViewList);

        jMenuBar.add(jMenuView);

        jMenuUpload.setText("Загрузить");
        jMenuUpload.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuUploadMouseClicked(evt);
            }
        });
        jMenuUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuUploadActionPerformed(evt);
            }
        });
        jMenuBar.add(jMenuUpload);

        jMenuDelete.setText("Удалить");
        jMenuDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuDeleteMouseClicked(evt);
            }
        });
        jMenuBar.add(jMenuDelete);

        jMenuCreateFolder.setText("Создать папку");
        jMenuCreateFolder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuCreateFolderMouseClicked(evt);
            }
        });
        jMenuBar.add(jMenuCreateFolder);

        jMenuRename.setText("Переименовать");
        jMenuRename.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuRenameMouseClicked(evt);
            }
        });
        jMenuBar.add(jMenuRename);

        jMenuCopy.setText("Копировать");
        jMenuCopy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuCopyMouseClicked(evt);
            }
        });
        jMenuBar.add(jMenuCopy);

        jMenuDownload.setText("Скачать");
        jMenuDownload.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuDownloadMouseClicked(evt);
            }
        });
        jMenuBar.add(jMenuDownload);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(279, 279, 279)
                        .addComponent(jButtonRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuNameActionPerformed

    private void jMenuSortSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSortSizeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuSortSizeActionPerformed

    private void jTextFieldSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldSearchActionPerformed

    private void jMenuDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuDateActionPerformed

    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBackActionPerformed
        // TODO add your handling code here:
        if (!currentPath.isEmpty()) {
            int sepIndex = currentPath.lastIndexOf(File.separator);
            if (sepIndex == -1)
                currentPath = "";
            else
                currentPath = currentPath.substring(0, sepIndex);
            refreshFileList();
        } 
    }//GEN-LAST:event_jButtonBackActionPerformed

    private void jMenuUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuUploadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuUploadActionPerformed

    private void jMenuUploadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuUploadMouseClicked
        // TODO add your handling code here:
        uploadFile();
    }//GEN-LAST:event_jMenuUploadMouseClicked

    private void jMenuDownloadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuDownloadMouseClicked
        // TODO add your handling code here:
        downloadFile();
    }//GEN-LAST:event_jMenuDownloadMouseClicked

    private void jMenuDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuDeleteMouseClicked
        // TODO add your handling code here:
        deleteItem();
    }//GEN-LAST:event_jMenuDeleteMouseClicked

    private void jMenuCreateFolderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuCreateFolderMouseClicked
        // TODO add your handling code here:
        createFolder();
    }//GEN-LAST:event_jMenuCreateFolderMouseClicked

    private void jMenuRenameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuRenameMouseClicked
        // TODO add your handling code here:
        renameItem();
    }//GEN-LAST:event_jMenuRenameMouseClicked

    private void jMenuCopyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuCopyMouseClicked
        // TODO add your handling code here:
        copyItem();
    }//GEN-LAST:event_jMenuCopyMouseClicked

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        // TODO add your handling code here:
        String query = jTextFieldSearch.getText().trim();
        List<String> results = client.search(query);
        listModel.clear();
        if (results != null) {
            for (String s : results) {
                listModel.addElement(s);
            }
        }
    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshActionPerformed
        // TODO add your handling code here:
        refreshFileList();
    }//GEN-LAST:event_jButtonRefreshActionPerformed

    private void jListFilesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListFilesMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
                    String selectedItem = jListFiles.getSelectedValue();
                    if (selectedItem != null) {
                        // Формируем новый относительный путь
                        String newPath = currentPath.isEmpty() ? selectedItem : currentPath + File.separator + selectedItem;
                        // Пробуем запросить содержимое папки
                        List<String> folderContents = client.listFolder(newPath);
                        if (folderContents != null) {
                            currentPath = newPath;
                            refreshFileList();
                        } else {
                            JOptionPane.showMessageDialog(Frame.this, "Это не папка или произошла ошибка");
                        }
                    }
                }
    }//GEN-LAST:event_jListFilesMouseClicked

    // Обновление списка файлов – запрашиваем содержимое текущего каталога с сервера
    private void refreshFileList() {
        List<String> files;
        if (currentPath.isEmpty()) {
            // Если текущий путь пустой – получаем содержимое корневой папки пользователя.
            files = client.listFolder("");
        } else {
            files = client.listFolder(currentPath);
        }
        listModel.clear();
        if (files != null) {
            for (String s : files) {
                listModel.addElement(s);
            }
        }
    }
    
    // Обработчик загрузки файла
    private void uploadFile() {
        JFileChooser fc = new JFileChooser();
        int res = fc.showOpenDialog(this);
        if (res == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            // Спрашиваем у пользователя куда сохранить (относительный путь)
            String destPath = JOptionPane.showInputDialog(this, "Enter destination path (relative):", file.getName());
            if (destPath == null || destPath.trim().isEmpty())
                destPath = file.getName();
            // Если загружаем в текущий каталог, добавляем префикс (если currentPath не пустой)
            String relativeDest = currentPath.isEmpty() ? destPath : currentPath + File.separator + destPath;
            if (client.uploadFile(file, relativeDest)) {
                JOptionPane.showMessageDialog(this, "Upload successful");
                refreshFileList();
            } else {
                JOptionPane.showMessageDialog(this, "Upload failed");
            }
        }
    }
    
    // Обработчик скачивания файла
    private void downloadFile() {
        String filePath = jListFiles.getSelectedValue();
        if (filePath == null) {
            JOptionPane.showMessageDialog(this, "Select a file from the list");
            return;
        }
        // Формируем относительный путь до файла с учетом текущего каталога
        String relativePath = currentPath.isEmpty() ? filePath : currentPath + File.separator + filePath;
        JFileChooser fc = new JFileChooser();
        fc.setSelectedFile(new File(filePath));
        int res = fc.showSaveDialog(this);
        if (res == JFileChooser.APPROVE_OPTION) {
            File saveTo = fc.getSelectedFile();
            if (client.downloadFile(relativePath, saveTo)) {
                JOptionPane.showMessageDialog(this, "Download successful");
            } else {
                JOptionPane.showMessageDialog(this, "Download failed");
            }
        }
    }
    
    // Создание папки
    private void createFolder() {
        String folderName = JOptionPane.showInputDialog(this, "Enter folder name (relative path):");
        if (folderName != null && !folderName.trim().isEmpty()) {
            String relativePath = currentPath.isEmpty() ? folderName : currentPath + File.separator + folderName;
            if (client.createFolder(relativePath)) {
                JOptionPane.showMessageDialog(this, "Folder created successfully");
                refreshFileList();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to create folder");
            }
        }
    }
    
    // Удаление файла или папки
    private void deleteItem() {
        String item = jListFiles.getSelectedValue();
        if (item == null) {
            JOptionPane.showMessageDialog(this, "Select an item from the list");
            return;
        }
        String relativePath = currentPath.isEmpty() ? item : currentPath + File.separator + item;
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete: " + item + "?");
        if (confirm == JOptionPane.YES_OPTION) {
            if (client.delete(relativePath)) {
                JOptionPane.showMessageDialog(this, "Deleted successfully");
                refreshFileList();
            } else {
                JOptionPane.showMessageDialog(this, "Deletion failed");
            }
        }
    }
    
    // Копирование файла или папки
    private void copyItem() {
        String source = jListFiles.getSelectedValue();
        if (source == null) {
            JOptionPane.showMessageDialog(this, "Select an item to copy");
            return;
        }
        String sourcePath = currentPath.isEmpty() ? source : currentPath + File.separator + source;
        String dest = JOptionPane.showInputDialog(this, "Enter destination path (relative):");
        if (dest != null && !dest.trim().isEmpty()) {
            if (client.copy(sourcePath, dest)) {
                JOptionPane.showMessageDialog(this, "Copy successful");
                refreshFileList();
            } else {
                JOptionPane.showMessageDialog(this, "Copy failed");
            }
        }
    }
    
    // Переименование файла или папки
    private void renameItem() {
        String oldName = jListFiles.getSelectedValue();
        if (oldName == null) {
            JOptionPane.showMessageDialog(this, "Select an item to rename");
            return;
        }
        String newName = JOptionPane.showInputDialog(this, "Enter new name:");
        if (newName != null && !newName.trim().isEmpty()) {
            String relativePath = currentPath.isEmpty() ? oldName : currentPath + File.separator + oldName;
            if (client.rename(relativePath, newName)) {
                JOptionPane.showMessageDialog(this, "Rename successful");
                refreshFileList();
            } else {
                JOptionPane.showMessageDialog(this, "Rename failed");
            }
        }
    }
    
    // Перемещение файла или папки
    private void moveItem() {
        String source = jListFiles.getSelectedValue();
        if (source == null) {
            JOptionPane.showMessageDialog(this, "Select an item to move");
            return;
        }
        String sourcePath = currentPath.isEmpty() ? source : currentPath + File.separator + source;
        String dest = JOptionPane.showInputDialog(this, "Enter destination folder (relative):");
        if (dest != null && !dest.trim().isEmpty()) {
            if (client.move(sourcePath, dest)) {
                JOptionPane.showMessageDialog(this, "Move successful");
                refreshFileList();
            } else {
                JOptionPane.showMessageDialog(this, "Move failed");
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Frame frame = new Frame();
                frame.setTitle("Файловый менеджер");
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonRefresh;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JList<String> jListFiles;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu12;
    private javax.swing.JMenu jMenu13;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar3;
    private javax.swing.JMenuBar jMenuBar4;
    private javax.swing.JMenuBar jMenuBar5;
    private javax.swing.JMenu jMenuCopy;
    private javax.swing.JMenu jMenuCreateFolder;
    private javax.swing.JMenuItem jMenuDate;
    private javax.swing.JMenu jMenuDelete;
    private javax.swing.JMenu jMenuDownload;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuName;
    private javax.swing.JMenu jMenuRename;
    private javax.swing.JMenu jMenuSortName;
    private javax.swing.JMenuItem jMenuSortSize;
    private javax.swing.JMenuItem jMenuSortType;
    private javax.swing.JMenu jMenuUpload;
    private javax.swing.JMenu jMenuView;
    private javax.swing.JMenuItem jMenuViewList;
    private javax.swing.JMenuItem jMenuViewTile;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JPopupMenu jPopupMenu3;
    private javax.swing.JPopupMenu jPopupMenu4;
    private javax.swing.JPopupMenu jPopupMenu5;
    private javax.swing.JPopupMenu jPopupMenu6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextFieldSearch;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private java.awt.Menu menu3;
    private java.awt.Menu menu4;
    private java.awt.MenuBar menuBar1;
    private java.awt.MenuBar menuBar2;
    private java.awt.PopupMenu popupMenu1;
    private java.awt.PopupMenu popupMenu2;
    // End of variables declaration//GEN-END:variables
}
